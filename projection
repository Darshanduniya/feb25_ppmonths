from airflow import DAG
from airflow.operators.python import PythonOperator, BranchPythonOperator
from airflow.operators.dummy import DummyOperator
from datetime import datetime
import monetdblite

# Define MonetDB Connection Details
MONETDB_HOST = "localhost"   # Change this to your DB host
MONETDB_PORT = 50000         # Default MonetDB port
MONETDB_USER = "monetdb"
MONETDB_PASSWORD = "monetdb"
MONETDB_DBNAME = "testdb"    # Replace with your actual database name

# Function to execute query in MonetDB
def task1(**kwargs):
    conn = monetdblite.connect(f"monetdb://{MONETDB_USER}:{MONETDB_PASSWORD}@{MONETDB_HOST}:{MONETDB_PORT}/{MONETDB_DBNAME}")
    cursor = conn.cursor()
    
    cursor.execute("SELECT type FROM table_name")  # Replace `table_name` with your actual table
    result = cursor.fetchone()  # Fetch the first row
    
    cursor.close()
    conn.close()
    
    if result:
        return bool(result[0])  # Convert to boolean and return
    return False  # Default return if no value found

# Function to decide the next task based on the return value of task1
def branch_task(**kwargs):
    ti = kwargs['ti']
    task1_result = ti.xcom_pull(task_ids="task1")  # Get the returned value from task1

    if task1_result is True:
        return "task2"
    else:
        return "task3"

# Define the DAG
dag = DAG(
    dag_id="monetdb_branching_dag",
    schedule_interval=None,
    start_date=datetime(2024, 2, 20),
    catchup=False
)

# Task to query MonetDB
task1_op = PythonOperator(
    task_id="task1",
    python_callable=task1,
    provide_context=True,
    dag=dag
)

# Branching task to decide execution flow
branch_op = BranchPythonOperator(
    task_id="branch_task",
    python_callable=branch_task,
    provide_context=True,
    dag=dag
)

# Dummy tasks to represent task2 and task3
task2 = DummyOperator(task_id="task2", dag=dag)
task3 = DummyOperator(task_id="task3", dag=dag)

# Define the task dependencies
task1_op >> branch_op >> [task2, task3]
